#include<stdio.h>
		struct processes 
		{
  			int id;
  			int at;
  			int bt;
  			int ct;
  			int tat;
  			int wt;
		};
		int main()
		{
    			int n,i,j,c=0,completed=0;
    			float avgtat=0,avgwt=0;
    			printf("Enter the no of processes : ");
    			scanf("%d",&n);
    			struct processes process[n];
    			printf("Enter the ProcessId,arrival time and Burst time : ");
    			for(i=0;i<n;i++)
    			{
        				scanf("%d%d%d",&process[i].id,&process[i].at,&process[i].bt);
    			}
    			int tq;
    			printf("Enter the time q : ");
    			scanf("%d",&tq);
    			int rem[n];
    			for(i=0;i<n;i++)
    			{
        				rem[i]=process[i].bt;
    			}
    			while(completed<n)
    			{
        				int evaluted=0;
        				for(i=0;i<n;i++)
        				{
            				if(process[i].at<=c && rem[i]>0)
            				{
                					evaluted=1;	
                      if(rem[i]<=tq)
					            {
                    						c+=rem[i];
                    						rem[i]=0;
                    						completed++;
                    						process[i].ct=c;
                    						process[i].tat=process[i].ct-process[i].at;
                    						process[i].wt=process[i].tat-process[i].bt;
                					}
                					else
                					{
                    						rem[i]-=tq;
                    						c+=tq;
                					}
            				}
        				}
        				if(evaluted==0)
        	    				c++;
    			}
    			printf("------ROUND ROBIN SCHEDULING------\n");
    			printf("\nPID\tAT\tBT\tCT\tTAT\tWT\n");
    			for(i = 0; i < n; i++) 
    			{
        				printf("%d\t%d\t%d\t%d\t%d\t%d\n", process[i].id, process[i].at,process[i].bt, process[i].ct, process[i].tat, process[i].wt);
        				avgtat += process[i].tat;
        				avgwt += process[i].wt;
    			}

    			avgtat /= n;
    			avgwt /= n;

    			printf("AVERAGE TAT: %.2f\n", avgtat);
    			printf("AVERAGE WT: %.2f\n", avgwt);
    			return 0;

		}

